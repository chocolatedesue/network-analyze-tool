#!/bin/bash

# Large Scale Network Emulation Kernel Tuning Script
# For 15,000+ containers with crun and FRR
#
# Usage: sudo ./tuning.sh
#
# Legend:
# [NO REBOOT] - Takes effect immediately
# [REBOOT REQUIRED] - Requires system reboot to take effect
# [CONDITIONAL] - May require reboot depending on current values

set -e

echo "=== Large Scale Network Emulation Kernel Tuning ==="
echo "Target: 15,000+ containers with crun and FRR"
echo ""

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root (use sudo)"
   exit 1
fi
# Parse arguments
LARGE=0
ENABLE_RPS=0
THP=0
while [[ $# -gt 0 ]]; do
  case "$1" in
    --large|--large-scale) LARGE=1; shift ;;
    --enable-rps|--enable-rps-xps) ENABLE_RPS=1; shift ;;
    --thp|--thp-madvise) THP=1; shift ;;
    --help|-h)
      echo "Usage: sudo ./tuning.sh [--large] [--enable-rps] [--thp]"
      echo "  --large         Apply large-scale increments (buffers, neighbor tables, backlog)"
      echo "  --enable-rps    Create and run RPS/XPS + NIC offload optimization service"
      echo "  --thp           Set Transparent Huge Pages to 'madvise' and persist"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"; exit 1 ;;
  esac
done


# Backup existing configuration
BACKUP_DIR="/root/kernel-tuning-backup-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"
echo "Creating backup in: $BACKUP_DIR"

# Backup current sysctl settings
sysctl -a > "$BACKUP_DIR/sysctl-before.txt" 2>/dev/null || true
cp /etc/security/limits.conf "$BACKUP_DIR/" 2>/dev/null || true

echo ""
echo "=== APPLYING KERNEL TUNING SETTINGS ==="
echo ""

# Create sysctl configuration file
SYSCTL_FILE="/etc/sysctl.d/99-frr-tuning.conf"
echo "Creating $SYSCTL_FILE"

cat > "$SYSCTL_FILE" << 'EOF'
# FRR and large-scale container host baseline
# Generated by tuning.sh on $(date)

# Core socket buffers and queues
net.core.rmem_default = 4194304
net.core.wmem_default = 4194304
net.core.rmem_max = 67108864
net.core.wmem_max = 67108864
net.core.netdev_max_backlog = 250000
net.core.somaxconn = 4096

# TCP (for many BGP sessions and stability)
net.ipv4.tcp_rmem = 4096 262144 33554432
net.ipv4.tcp_wmem = 4096 262144 33554432
net.ipv4.tcp_max_syn_backlog = 4096
net.ipv4.ip_local_port_range = 1024 65000
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_syncookies = 1

# Neighbor/ARP/ND scaling
net.ipv4.neigh.default.gc_thresh1 = 4096
net.ipv4.neigh.default.gc_thresh2 = 8192
net.ipv4.neigh.default.gc_thresh3 = 16384
net.ipv6.neigh.default.gc_thresh1 = 4096
net.ipv6.neigh.default.gc_thresh2 = 8192
net.ipv6.neigh.default.gc_thresh3 = 16384

# Multipath hashing and neighbor use (if supported by kernel)
net.ipv4.fib_multipath_hash_policy = 1
net.ipv6.fib_multipath_hash_policy = 1
net.ipv4.fib_multipath_use_neigh = 1

# Router-appropriate IPv4/IPv6 defaults
net.ipv4.ip_forward = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.rp_filter = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.all.forwarding = 1
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
net.ipv6.conf.all.accept_ra = 0
net.ipv6.conf.default.accept_ra = 0

# File descriptors and swapping
fs.file-max = 2000000
vm.swappiness = 1
EOF

echo "[NO REBOOT] Applied sysctl settings to $SYSCTL_FILE"

# Apply sysctl settings immediately
# [NO REBOOT]
echo "Applying sysctl settings... (ignoring unknown keys)"
set +e
# Optional large-scale increments
if [[ $LARGE -eq 1 ]]; then
  LARGE_FILE="/etc/sysctl.d/99-frr-tuning-large.conf"
  echo "Creating $LARGE_FILE for large-scale increments"
  cat > "$LARGE_FILE" << 'EOF'
# Large-scale/RR increments (apply only if needed)
# Increase socket buffers for bursts and netlink-heavy workloads
net.core.rmem_max = 134217728
net.core.wmem_max = 134217728
net.ipv4.tcp_rmem = 4096 1048576 67108864
net.ipv4.tcp_wmem = 4096 1048576 67108864

# Grow neighbor tables further for big L3 fabrics
net.ipv4.neigh.default.gc_thresh1 = 8192
net.ipv4.neigh.default.gc_thresh2 = 32768
net.ipv4.neigh.default.gc_thresh3 = 65536
net.ipv6.neigh.default.gc_thresh1 = 8192
net.ipv6.neigh.default.gc_thresh2 = 32768
net.ipv6.neigh.default.gc_thresh3 = 65536

# Increase backlog on busy NICs
net.core.netdev_max_backlog = 500000

# Optional NAPI budget tuning (measure before keeping)
net.core.netdev_budget = 600
net.core.netdev_budget_usecs = 8000
EOF
  echo "[NO REBOOT] Added large-scale increments to $LARGE_FILE"
  # Apply immediately
  sysctl -p "$LARGE_FILE" 2>/dev/null
fi

sysctl -p "$SYSCTL_FILE" 2>/dev/null
if [[ $LARGE -eq 1 ]]; then
  sysctl -p "/etc/sysctl.d/99-frr-tuning-large.conf" 2>/dev/null
fi
set -e

echo ""
echo "=== SYSTEM LIMITS CONFIGURATION ==="
echo ""

# Configure system limits
LIMITS_FILE="/etc/security/limits.d/99-large-scale-network.conf"
echo "Creating $LIMITS_FILE"

cat > "$LIMITS_FILE" << 'EOF'
# Large Scale Network Emulation Limits
# For 15,000+ containers with crun and FRR

# File descriptor limits
* soft nofile 1048576
* hard nofile 1048576
root soft nofile 1048576
root hard nofile 1048576

# Process limits
* soft nproc 1048576
* hard nproc 1048576
root soft nproc 1048576
root hard nproc 1048576

# Memory lock limits (for DPDK if used)
* soft memlock unlimited
* hard memlock unlimited

# Core dump size
* soft core unlimited
* hard core unlimited
EOF

echo "[REBOOT REQUIRED] Applied system limits to $LIMITS_FILE"

echo ""
echo "=== SYSTEMD CONFIGURATION ==="
echo ""

# Configure systemd limits
SYSTEMD_CONF="/etc/systemd/system.conf.d/99-large-scale-network.conf"
mkdir -p "$(dirname "$SYSTEMD_CONF")"
echo "Creating $SYSTEMD_CONF"

cat > "$SYSTEMD_CONF" << 'EOF'
[Manager]
# Increase systemd limits for large scale deployments
DefaultLimitNOFILE=1048576
DefaultLimitNPROC=1048576
DefaultLimitMEMLOCK=infinity
DefaultTasksMax=infinity
EOF

echo "[REBOOT REQUIRED] Applied systemd limits to $SYSTEMD_CONF"

# Configure systemd user limits
USER_SYSTEMD_CONF="/etc/systemd/user.conf.d/99-large-scale-network.conf"
mkdir -p "$(dirname "$USER_SYSTEMD_CONF")"
echo "Creating $USER_SYSTEMD_CONF"

cat > "$USER_SYSTEMD_CONF" << 'EOF'
[Manager]
# Increase systemd user limits
DefaultLimitNOFILE=1048576
DefaultLimitNPROC=1048576
DefaultLimitMEMLOCK=infinity
DefaultTasksMax=infinity
EOF

echo "[REBOOT REQUIRED] Applied systemd user limits to $USER_SYSTEMD_CONF"

echo ""
echo "=== TRANSPARENT HUGE PAGES CONFIGURATION ==="
echo ""

if [[ $THP -eq 1 ]]; then
  # Configure Transparent Huge Pages
  echo "Configuring Transparent Huge Pages to 'madvise'..."
  echo madvise > /sys/kernel/mm/transparent_hugepage/enabled || true
  echo madvise > /sys/kernel/mm/transparent_hugepage/defrag || true

  # Make THP settings persistent via systemd
  THP_SERVICE="/etc/systemd/system/configure-thp.service"
  cat > "$THP_SERVICE" << 'EOF'
[Unit]
Description=Configure Transparent Huge Pages
After=multi-user.target

[Service]
Type=oneshot
ExecStart=/bin/bash -c 'echo madvise > /sys/kernel/mm/transparent_hugepage/enabled'
ExecStart=/bin/bash -c 'echo madvise > /sys/kernel/mm/transparent_hugepage/defrag'
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
  systemctl enable configure-thp.service
  echo "[NO REBOOT] THP configured (applied immediately and on boot)"
else
  echo "[SKIPPED] THP not changed (pass --thp to enable 'madvise')"
fi



echo ""
echo "=== NETWORK INTERFACE OPTIMIZATION ==="
echo ""

if [[ $ENABLE_RPS -eq 1 ]]; then
  # Create network interface optimization script
  NET_OPT_SCRIPT="/usr/local/bin/optimize-network-interfaces.sh"
  cat > "$NET_OPT_SCRIPT" << 'EOF'
#!/bin/bash
# Network interface optimization for large scale emulation

# Function to optimize a network interface
optimize_interface() {
    local iface=$1
    echo "Optimizing interface: $iface"

    # Disable LRO, enable GRO
    ethtool -K "$iface" lro off gro on 2>/dev/null || true

    # Set ring buffer sizes (if supported)
    ethtool -G "$iface" rx 4096 tx 4096 2>/dev/null || true

    # Enable all available queues
    local max_queues=$(ethtool -l "$iface" 2>/dev/null | grep -A4 "maximums" | grep "Combined" | awk '{print $2}')
    if [[ -n "$max_queues" && "$max_queues" -gt 0 ]]; then
        ethtool -L "$iface" combined "$max_queues" 2>/dev/null || true
    fi

    # Configure RPS/XPS (use all CPUs except first 2)
    local cpu_count=$(nproc)
    if [[ $cpu_count -gt 2 ]]; then
        local cpu_mask=$(printf "%x" $((2**cpu_count - 1 - 3)))  # Exclude CPU 0,1

        # Set RPS
        for queue in /sys/class/net/"$iface"/queues/rx-*; do
            [[ -d "$queue" ]] && echo "$cpu_mask" > "$queue/rps_cpus" 2>/dev/null || true
            [[ -d "$queue" ]] && echo 32768 > "$queue/rps_flow_cnt" 2>/dev/null || true
        done

        # Set XPS
        for queue in /sys/class/net/"$iface"/queues/tx-*; do
            [[ -d "$queue" ]] && echo "$cpu_mask" > "$queue/xps_cpus" 2>/dev/null || true
        done
    fi
}

# Optimize all physical interfaces
for iface in $(ls /sys/class/net/ | grep -E '^(eth|ens|enp|eno)'); do
    if [[ -e "/sys/class/net/$iface/device" ]]; then
        optimize_interface "$iface"
    fi
done

echo "Network interface optimization completed"
EOF

  chmod +x "$NET_OPT_SCRIPT"

  # Create systemd service for network optimization
  NET_OPT_SERVICE="/etc/systemd/system/optimize-network.service"
  cat > "$NET_OPT_SERVICE" << 'EOF'
[Unit]
Description=Optimize Network Interfaces for Large Scale Emulation
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/optimize-network-interfaces.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

  systemctl enable optimize-network.service
  echo "[NO REBOOT] Created network interface optimization service"

  # Run network optimization now
  "$NET_OPT_SCRIPT"
  echo "[NO REBOOT] Applied network interface optimizations"
else
  echo "[SKIPPED] RPS/XPS optimization not applied (pass --enable-rps to enable)"
fi

echo ""
echo "=== CONTAINER RUNTIME NOTE ==="
echo ""
echo "No runtime-specific changes applied. Use your container engine (podman/docker) configuration to scale to 15k+ containers (pids/no-file limits, cgroups v2)."

echo ""
echo "=== VERIFICATION AND SUMMARY ==="
echo ""

# Verify some key settings
echo "Verifying key settings:"
echo "- File descriptor limit: $(ulimit -n)"
echo "- Process limit: $(ulimit -u)"
echo "- TCP rmem_max: $(sysctl -n net.core.rmem_max)"
echo "- TCP wmem_max: $(sysctl -n net.core.wmem_max)"
echo "- Neighbor gc_thresh3 (IPv4): $(sysctl -n net.ipv4.neigh.default.gc_thresh3)"
echo "- PID max: $(sysctl -n kernel.pid_max)"
echo "- File max: $(sysctl -n fs.file-max)"

echo ""
echo "=== TUNING COMPLETE ==="
echo ""
echo "SUMMARY OF CHANGES:"
echo ""
echo "[NO REBOOT REQUIRED] - Applied immediately:"
echo "  ✓ Network buffer sizes and queues"
echo "  ✓ TCP tuning for BGP sessions"
echo "  ✓ Neighbor table scaling"
echo "  ✓ Routing and forwarding settings"
echo "  ✓ Memory management"
echo "  ✓ Netfilter connection tracking"
echo "  ✓ Transparent Huge Pages"
echo "  ✓ Network interface optimizations"
echo "  ✓ Container runtime optimizations"
echo ""
echo "[REBOOT REQUIRED] - Takes effect after reboot:"
echo "  ⚠ System limits (/etc/security/limits.d/)"
echo "  ⚠ Systemd limits (/etc/systemd/system.conf.d/)"
echo "  ⚠ Some kernel parameters (shmmax, shmall, etc.)"
echo ""
echo "RECOMMENDATIONS:"
echo "1. Reboot the system to ensure all limits take effect"
echo "2. After reboot, verify settings with: sudo ./verify-tuning.sh"
echo "3. Monitor system performance and adjust as needed"
echo "4. Consider CPU isolation for FRR processes in production"
echo ""
echo "Backup created in: $BACKUP_DIR"
echo ""
echo "To revert changes, see the rollback script: ./rollback-tuning.sh"

# Create verification script
cat > "verify-tuning.sh" << 'EOF'
#!/bin/bash
echo "=== KERNEL TUNING VERIFICATION ==="
echo ""
echo "System Limits:"
echo "- File descriptors: $(ulimit -n)"
echo "- Processes: $(ulimit -u)"
echo ""
echo "Network Settings:"
echo "- rmem_max: $(sysctl -n net.core.rmem_max)"
echo "- wmem_max: $(sysctl -n net.core.wmem_max)"
echo "- netdev_max_backlog: $(sysctl -n net.core.netdev_max_backlog)"
echo "- somaxconn: $(sysctl -n net.core.somaxconn)"
echo ""
echo "Neighbor Tables:"
echo "- IPv4 gc_thresh3: $(sysctl -n net.ipv4.neigh.default.gc_thresh3)"
echo "- IPv6 gc_thresh3: $(sysctl -n net.ipv6.neigh.default.gc_thresh3)"
echo ""
echo "Container Scaling:"
echo "- PID max: $(sysctl -n kernel.pid_max)"
echo "- File max: $(sysctl -n fs.file-max)"
echo "- Max map count: $(sysctl -n vm.max_map_count)"
echo ""
echo "Memory:"
echo "- Swappiness: $(sysctl -n vm.swappiness)"
echo "- Overcommit memory: $(sysctl -n vm.overcommit_memory)"
echo ""
echo "Transparent Huge Pages:"
echo "- Enabled: $(cat /sys/kernel/mm/transparent_hugepage/enabled)"
echo "- Defrag: $(cat /sys/kernel/mm/transparent_hugepage/defrag)"
EOF

chmod +x verify-tuning.sh

# Create rollback script
cat > "rollback-tuning.sh" << 'EOF'
#!/bin/bash
echo "=== KERNEL TUNING ROLLBACK ==="
echo ""
echo "This script will remove the tuning configurations."
echo "WARNING: This will require a reboot to fully take effect."
echo ""
read -p "Are you sure you want to rollback? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Rollback cancelled."
    exit 1
fi

echo "Removing tuning configurations..."

# Remove sysctl configuration
rm -f /etc/sysctl.d/99-frr-tuning.conf /etc/sysctl.d/99-frr-tuning-large.conf

# Remove limits configuration
rm -f /etc/security/limits.d/99-large-scale-network.conf

# Remove systemd configurations
rm -f /etc/systemd/system.conf.d/99-large-scale-network.conf
rm -f /etc/systemd/user.conf.d/99-large-scale-network.conf

# Disable and remove services
systemctl disable configure-thp.service 2>/dev/null || true
rm -f /etc/systemd/system/configure-thp.service

systemctl disable optimize-network.service 2>/dev/null || true
rm -f /etc/systemd/system/optimize-network.service
rm -f /usr/local/bin/optimize-network-interfaces.sh

systemctl daemon-reload

echo "Rollback completed. Please reboot the system."
EOF

chmod +x rollback-tuning.sh

echo "Created verification script: ./verify-tuning.sh"
echo "Created rollback script: ./rollback-tuning.sh"
